300 -6.073222560369084 3 5.0 108 8 3 [118, 64] True 2 3 [108, 64, 64] [0. 0. 0. 0.] True
contracted_coeff torch.Size([3, 3, 8, 108]) Parameter containing:
tensor([[[[-2.8546e-02, -2.4712e-02,  2.3668e-02,  ...,  1.6643e-02,
            2.9303e-02,  8.5216e-03],
          [ 2.2225e-02,  1.2819e-02,  1.0467e-03,  ...,  2.4443e-02,
           -2.3543e-02, -1.9158e-03],
          [-9.7051e-03,  1.8343e-02, -2.3466e-02,  ...,  2.2555e-02,
            8.0498e-03,  2.3887e-02],
          ...,
          [-8.3368e-04, -1.5602e-02,  5.7555e-03,  ...,  8.5757e-03,
            2.4693e-02,  5.3203e-03],
          [ 3.3035e-02,  6.6228e-03, -2.7584e-02,  ...,  3.1898e-02,
            2.9929e-02,  5.2172e-04],
          [ 1.2062e-02, -1.7021e-02,  2.9176e-02,  ..., -2.7715e-03,
           -1.9872e-02, -1.9321e-02]],

         [[ 1.8619e-02,  2.1576e-03, -2.1048e-02,  ...,  3.0273e-02,
           -2.1818e-02,  2.0938e-02],
          [-2.6016e-02, -2.9683e-03, -3.8629e-03,  ...,  2.7781e-03,
            1.3184e-02,  1.3550e-03],
          [ 3.2557e-02, -2.0708e-02, -3.2117e-02,  ..., -2.4537e-02,
           -1.2742e-02, -2.7644e-02],
          ...,
          [-2.2528e-02,  1.9161e-02,  2.9416e-02,  ...,  1.2447e-02,
           -6.5252e-03, -3.0526e-02],
          [ 2.2262e-02, -1.1535e-02, -3.9431e-03,  ...,  5.1898e-03,
           -1.1201e-02, -6.3741e-03],
          [-2.0364e-03, -3.0430e-02, -3.3990e-02,  ..., -1.0407e-02,
           -1.4272e-02,  1.4891e-02]],

         [[ 1.5641e-02, -1.7748e-02, -1.9989e-02,  ..., -1.3218e-02,
           -2.0152e-02,  2.5781e-02],
          [ 9.7842e-04,  2.4591e-02, -7.3114e-03,  ..., -1.7499e-02,
           -1.8495e-02,  1.5016e-02],
          [ 8.5789e-03, -2.6545e-02, -1.4028e-02,  ...,  1.2284e-02,
           -8.6913e-03,  3.3634e-02],
          ...,
          [-2.9878e-02, -1.2084e-02,  3.2602e-02,  ...,  2.6217e-02,
           -2.2049e-03, -9.2446e-03],
          [ 1.3190e-02,  2.9617e-02,  2.2825e-02,  ...,  2.7843e-02,
            1.3507e-02, -2.5833e-02],
          [-2.6289e-02, -3.9177e-03,  3.5000e-03,  ..., -1.4928e-02,
            2.8080e-02,  2.4229e-02]]],


        [[[-1.4048e-03, -1.5470e-02, -1.8244e-02,  ..., -2.1222e-02,
           -1.1297e-02, -2.8391e-02],
          [ 2.4605e-02,  2.8518e-02, -1.9155e-02,  ...,  2.8151e-02,
           -9.8355e-03, -2.8253e-03],
          [-7.2731e-03, -1.6145e-02, -1.4117e-02,  ..., -1.0835e-02,
            2.4568e-02,  2.3378e-02],
          ...,
          [-3.3563e-02,  1.3814e-02,  4.3299e-03,  ...,  6.4157e-03,
            4.6715e-03, -2.2144e-02],
          [-1.3098e-02, -2.0503e-02, -3.8239e-03,  ...,  3.2167e-04,
           -3.3131e-02, -2.7372e-02],
          [-1.6581e-02,  1.9738e-03,  8.7271e-04,  ...,  2.6199e-02,
            6.0643e-05,  3.3420e-02]],

         [[ 3.0538e-02, -1.7051e-02, -8.9756e-03,  ..., -1.8346e-02,
           -1.2569e-02, -2.5996e-02],
          [-1.9397e-02, -2.7774e-02, -9.7419e-03,  ..., -1.5522e-02,
            2.5242e-02, -3.0745e-02],
          [-1.0218e-02,  2.3637e-02,  2.1698e-02,  ...,  6.0226e-03,
           -2.3497e-02, -3.1770e-02],
          ...,
          [-2.6621e-02, -2.2385e-02, -1.8023e-03,  ..., -1.0212e-02,
           -8.3415e-03, -1.5855e-02],
          [ 1.7694e-03,  8.6897e-03,  2.1767e-02,  ..., -2.8703e-02,
           -1.6722e-02, -1.9723e-03],
          [-3.0828e-03, -6.7115e-03, -2.1215e-03,  ..., -1.1753e-02,
            3.0876e-02, -2.0971e-03]],

         [[ 2.5865e-02, -3.0543e-02, -6.5354e-04,  ..., -9.2325e-03,
           -3.3345e-03, -1.2946e-02],
          [ 1.0968e-02, -3.2244e-02, -3.2732e-02,  ..., -3.2720e-02,
           -3.1439e-02, -2.0247e-02],
          [-2.0117e-02,  3.2704e-02,  1.4124e-02,  ...,  1.8227e-02,
           -2.9945e-02, -1.5388e-02],
          ...,
          [ 3.1399e-02,  3.0828e-02, -1.0312e-02,  ...,  1.9532e-02,
            2.3303e-02, -2.7898e-02],
          [-8.5288e-03, -3.1505e-02,  2.4840e-02,  ...,  1.0944e-02,
            3.2753e-02,  1.9246e-02],
          [ 1.7866e-03,  8.3413e-03,  2.4352e-02,  ..., -2.7107e-02,
           -1.4494e-02,  1.5516e-02]]],


        [[[ 1.8422e-02, -2.8344e-02,  8.4470e-03,  ...,  1.2791e-02,
           -2.7064e-02, -8.5538e-03],
          [-1.6733e-02,  8.7807e-04, -4.7384e-04,  ...,  2.3250e-02,
            5.6831e-03,  3.4430e-03],
          [ 8.3717e-03, -1.1571e-02, -2.0306e-02,  ...,  3.0741e-02,
            2.8475e-02,  1.4327e-02],
          ...,
          [ 1.5394e-02, -8.7277e-03,  3.3991e-02,  ...,  1.2521e-02,
           -3.1398e-02, -2.2633e-02],
          [-3.0669e-02,  9.7378e-03, -3.3822e-02,  ..., -2.5124e-02,
           -1.7229e-02, -2.3252e-02],
          [-3.3334e-02,  5.2965e-03,  2.9480e-02,  ..., -2.0563e-02,
            8.6613e-03,  1.6915e-02]],

         [[-1.0040e-02,  2.4181e-02,  1.2910e-02,  ...,  2.5842e-02,
           -1.9736e-02,  1.0323e-02],
          [-2.9734e-02,  2.1335e-02,  6.7198e-03,  ...,  3.1368e-02,
            2.6941e-02, -1.9850e-02],
          [ 9.3314e-03, -2.3939e-02,  1.7425e-02,  ..., -1.0730e-02,
            7.0854e-03,  1.3821e-02],
          ...,
          [-1.6691e-02, -1.6680e-02, -3.2486e-02,  ...,  1.3418e-02,
           -2.6097e-02, -1.1200e-03],
          [-7.4118e-03,  2.7997e-02, -2.2867e-02,  ...,  2.3892e-02,
           -4.8364e-03, -3.3226e-02],
          [ 1.1602e-02, -2.4312e-02, -4.2550e-03,  ..., -1.2161e-02,
            1.7025e-03,  1.2025e-02]],

         [[-3.0524e-02,  2.7567e-02,  6.3144e-04,  ..., -3.1872e-02,
           -2.2873e-02,  3.1842e-02],
          [-6.6073e-03, -9.8791e-03,  1.6825e-02,  ..., -1.7097e-03,
            2.2987e-02, -7.3658e-04],
          [ 2.0594e-02, -4.5461e-03, -7.9732e-04,  ..., -3.3142e-02,
           -1.4203e-02, -1.2313e-02],
          ...,
          [-1.8456e-02, -1.9528e-02,  1.2300e-02,  ...,  3.2571e-02,
           -5.7847e-03, -2.5847e-02],
          [ 2.8416e-02, -8.9145e-03, -1.3627e-02,  ...,  2.2224e-03,
           -2.7296e-02, -2.3497e-02],
          [-2.9329e-02, -1.0641e-03,  2.0810e-02,  ...,  1.1010e-02,
            1.6068e-02,  1.0784e-02]]]], device='cuda:0', requires_grad=True)
emb_neighnn.net.0.weight torch.Size([64, 118]) Parameter containing:
tensor([[-0.0092,  0.0857, -0.1374,  ..., -0.1005, -0.1270, -0.1063],
        [-0.0445, -0.0610,  0.0857,  ..., -0.0777,  0.0024, -0.0756],
        [-0.0617, -0.1569, -0.0304,  ...,  0.0931, -0.0870, -0.0741],
        ...,
        [ 0.1369, -0.1457, -0.0781,  ..., -0.0362,  0.0658, -0.1373],
        [ 0.0245, -0.0154,  0.1451,  ..., -0.1077, -0.0883,  0.1593],
        [-0.0114, -0.0846, -0.0064,  ..., -0.0814,  0.0563,  0.1776]],
       device='cuda:0', requires_grad=True)
emb_neighnn.net.0.bias torch.Size([64]) Parameter containing:
tensor([ 0.0676,  0.0066,  0.0225,  0.0692,  0.0527, -0.0683,  0.0716,  0.0281,
         0.0202,  0.0409,  0.0540,  0.0237, -0.0502, -0.0842,  0.0008,  0.0241,
         0.0610,  0.0432, -0.0448,  0.0646,  0.0551, -0.0607,  0.0596,  0.0820,
         0.0857,  0.0489, -0.0886,  0.0647,  0.0176, -0.0122,  0.0917, -0.0303,
        -0.0832,  0.0829,  0.0229, -0.0517,  0.0859,  0.0875, -0.0279, -0.0747,
        -0.0450,  0.0345, -0.0461, -0.0023, -0.0637, -0.0146,  0.0216, -0.0770,
        -0.0400,  0.0560, -0.0789,  0.0565,  0.0808,  0.0393,  0.0818, -0.0501,
        -0.0054, -0.0653,  0.0288,  0.0388, -0.0061, -0.0318,  0.0660,  0.0134],
       device='cuda:0', requires_grad=True)
emb_neighnn.net.4.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
emb_neighnn.net.4.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085]], device='cuda:0', requires_grad=True)
emb_neighnn.net.5.weight torch.Size([24, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
emb_neighnn.net.5.bias torch.Size([24]) Parameter containing:
tensor([ 1.2212e-03,  8.3882e-03,  7.9092e-03, -4.4604e-03, -4.1912e-03,
        -4.6399e-03, -9.4635e-04, -1.2932e-03,  1.0000e+00,  1.0000e+00,
         1.0000e+00,  1.0000e+00,  1.0000e+00,  1.0000e+00,  1.0000e+00,
         1.0000e+00,  2.3678e-01,  4.6668e-01,  1.6570e+00,  2.0747e+00,
         5.7147e-01,  1.9002e+00,  1.2847e+00,  1.1044e-01], device='cuda:0',
       requires_grad=True)
emb_centernn.net.0.weight torch.Size([64, 118]) Parameter containing:
tensor([[ 0.0204, -0.1813, -0.0006,  ...,  0.0595, -0.0895, -0.1309],
        [ 0.0096,  0.0962, -0.1661,  ...,  0.0087, -0.0367, -0.1483],
        [-0.1104, -0.0019,  0.0192,  ...,  0.1530, -0.1428,  0.1042],
        ...,
        [ 0.0718, -0.0653, -0.0818,  ...,  0.1643, -0.0595,  0.1046],
        [ 0.0002, -0.0619, -0.0514,  ...,  0.1601,  0.0107,  0.1209],
        [-0.1661,  0.1421,  0.0743,  ...,  0.1782, -0.0398, -0.0978]],
       device='cuda:0', requires_grad=True)
emb_centernn.net.0.bias torch.Size([64]) Parameter containing:
tensor([ 0.0570,  0.0150,  0.0281,  0.0125, -0.0513, -0.0388,  0.0556, -0.0800,
        -0.0753, -0.0124, -0.0077,  0.0244,  0.0780, -0.0881,  0.0069,  0.0232,
         0.0295,  0.0641, -0.0063, -0.0907,  0.0770, -0.0331,  0.0341,  0.0641,
         0.0436, -0.0786, -0.0146,  0.0174,  0.0436, -0.0105, -0.0780, -0.0056,
         0.0428,  0.0705,  0.0709, -0.0242, -0.0466, -0.0149, -0.0918, -0.0117,
         0.0160, -0.0125, -0.0851, -0.0487,  0.0671, -0.0042, -0.0495, -0.0126,
        -0.0367,  0.0221,  0.0624, -0.0418, -0.0508, -0.0820,  0.0901, -0.0795,
        -0.0596, -0.0773, -0.0209,  0.0527, -0.0771,  0.0531, -0.0704, -0.0797],
       device='cuda:0', requires_grad=True)
emb_centernn.net.4.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
emb_centernn.net.4.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085, 0.0085,
         0.0085]], device='cuda:0', requires_grad=True)
emb_centernn.net.5.weight torch.Size([108, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
emb_centernn.net.5.bias torch.Size([108]) Parameter containing:
tensor([-2.0702e-03, -1.9770e-03, -4.8015e-03, -2.6196e-03, -2.5255e-03,
         2.4461e-03,  4.3050e-03, -4.3736e-03,  1.5936e-03, -1.6865e-03,
        -2.0599e-03,  4.9776e-03,  3.8532e-04,  1.5427e-03, -2.1269e-03,
         4.2634e-03, -5.0839e-04, -8.5053e-05, -1.9509e-03, -2.2552e-03,
         1.6769e-03,  7.1786e-04,  1.6512e-03,  3.9942e-04,  7.4613e-04,
        -1.6705e-03, -3.5875e-03, -1.4518e-03, -2.7664e-03, -1.5256e-03,
         2.1632e-03, -2.6979e-03,  3.7705e-04, -4.2472e-03, -9.4056e-04,
        -1.2636e-05, -1.7978e-03, -2.1404e-03, -1.1180e-03,  1.9946e-03,
        -2.4696e-04, -2.2141e-03,  6.2850e-04,  3.5137e-03,  2.2509e-03,
        -3.6073e-03, -3.2165e-03,  5.3515e-04,  2.5284e-03, -6.1353e-04,
         2.5423e-03,  2.3240e-04,  3.3925e-03, -3.8483e-04,  4.2163e-03,
         4.4128e-03,  2.7230e-03,  4.3156e-03,  6.6651e-03,  3.3029e-03,
        -5.7787e-03,  5.0641e-03,  2.8507e-04, -5.0811e-03,  1.7735e-03,
         9.0071e-04,  4.1966e-03, -4.4906e-03, -3.8207e-03,  3.7528e-03,
         5.4633e-04, -4.7317e-03,  5.5659e-03, -1.7224e-03, -1.4040e-04,
        -1.7003e-03, -3.2397e-03, -1.1680e-03, -4.1207e-03, -1.5148e-03,
         2.5496e-03, -4.9529e-03,  6.1534e-03,  1.3659e-03,  1.1575e-03,
        -3.2803e-03, -2.4711e-04,  6.7939e-03,  1.4588e-03, -1.5169e-03,
         5.4340e-03,  8.6220e-04,  8.1914e-04, -1.8801e-03, -3.7484e-03,
         4.2527e-03,  1.1377e-03, -1.7249e-03,  1.9489e-03,  2.1921e-03,
        -3.0890e-03, -8.4649e-04,  1.5177e-04,  2.5408e-04, -2.4578e-03,
         3.1448e-03, -2.9018e-03, -2.2530e-04], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.0.weight torch.Size([64, 108]) Parameter containing:
tensor([[ 0.0976,  0.0282, -0.0026,  ...,  0.1413, -0.0890, -0.0598],
        [-0.0102, -0.1100, -0.0773,  ..., -0.0207, -0.1611,  0.1738],
        [ 0.0090, -0.0121, -0.1035,  ..., -0.0254,  0.0730, -0.0800],
        ...,
        [ 0.0240,  0.0466, -0.0861,  ..., -0.0138,  0.1166, -0.1562],
        [-0.0614, -0.1582,  0.0529,  ..., -0.0764,  0.0920,  0.0999],
        [-0.0098, -0.1539,  0.0962,  ...,  0.0136,  0.0286,  0.0046]],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.0.bias torch.Size([64]) Parameter containing:
tensor([-0.0366,  0.0528, -0.0542,  0.0822, -0.0279,  0.0790,  0.0717,  0.0537,
         0.0627,  0.0724, -0.0226,  0.0760,  0.0031,  0.0692,  0.0095,  0.0105,
         0.0416,  0.0392,  0.0461,  0.0458,  0.0768, -0.0019,  0.0281,  0.0043,
         0.0300,  0.0666, -0.0604, -0.0313, -0.0908,  0.0954,  0.0094,  0.0668,
         0.0720, -0.0053, -0.0386,  0.0710,  0.0603,  0.0485, -0.0681, -0.0601,
         0.0434,  0.0204, -0.0918, -0.0450,  0.0705, -0.0184,  0.0637, -0.0017,
         0.0063, -0.0415,  0.0853,  0.0608, -0.0059, -0.0650, -0.0094, -0.0367,
         0.0742, -0.0708, -0.0556,  0.0514, -0.0819,  0.0330,  0.0079,  0.0154],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.1.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.1.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.1.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.1.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.1.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.1.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.2.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.2.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.2.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.2.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.2.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.2.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.3.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.3.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.3.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.3.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.3.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.3.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.4.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_0.net.4.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156]], device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.5.weight torch.Size([8, 64]) Parameter containing:
tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
       device='cuda:0', requires_grad=True)
ocmod.memssage_0.net.5.bias torch.Size([8]) Parameter containing:
tensor([-0.8988, -1.8179,  0.2410,  1.8475, -0.4943,  0.5059, -0.3790,  0.2381],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.0.weight torch.Size([64, 108]) Parameter containing:
tensor([[-0.0004, -0.1243, -0.1194,  ...,  0.1617, -0.1522,  0.1306],
        [-0.0491, -0.0926,  0.0823,  ..., -0.1305, -0.0444,  0.1449],
        [-0.0444, -0.0945, -0.0161,  ..., -0.1024,  0.1776, -0.0126],
        ...,
        [ 0.1528,  0.0765, -0.0902,  ...,  0.0145, -0.1242, -0.0491],
        [-0.1191, -0.0791, -0.1396,  ..., -0.1694,  0.0241, -0.1581],
        [ 0.0304,  0.0732,  0.0224,  ...,  0.0374, -0.0914,  0.0782]],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.0.bias torch.Size([64]) Parameter containing:
tensor([ 0.0436, -0.0743, -0.0923, -0.0721,  0.0004,  0.0482, -0.0268,  0.0291,
         0.0312, -0.0347,  0.0179,  0.0818,  0.0917, -0.0096,  0.0909, -0.0080,
         0.0222,  0.0511, -0.0060,  0.0830,  0.0745,  0.0436,  0.0592, -0.0608,
         0.0430,  0.0663,  0.0532, -0.0888,  0.0466, -0.0197, -0.0199,  0.0042,
        -0.0501, -0.0952,  0.0328, -0.0202, -0.0017,  0.0196, -0.0313,  0.0961,
         0.0859,  0.0541,  0.0866,  0.0639,  0.0400,  0.0825,  0.0513, -0.0553,
        -0.0011,  0.0145,  0.0654,  0.0084,  0.0620, -0.0931,  0.0204,  0.0502,
         0.0435, -0.0535, -0.0243,  0.0645,  0.0859, -0.0433,  0.0274, -0.0085],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.1.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.1.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.1.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.1.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.1.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.1.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.2.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.2.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.2.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.2.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.2.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.2.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.3.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.3.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.3.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.3.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.3.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.3.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.4.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
ocmod.memssage_1.net.4.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156]], device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.5.weight torch.Size([8, 64]) Parameter containing:
tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
       device='cuda:0', requires_grad=True)
ocmod.memssage_1.net.5.bias torch.Size([8]) Parameter containing:
tensor([-2.1945, -3.3920,  0.0893,  0.9643, -0.9153,  0.5505,  1.3245, -1.3793],
       device='cuda:0', requires_grad=True)
outnn.net.0.weight torch.Size([64, 108]) Parameter containing:
tensor([[-0.0111, -0.0724, -0.1803,  ...,  0.0681,  0.1050, -0.0955],
        [ 0.0024, -0.1335, -0.1469,  ..., -0.0712,  0.1048,  0.0735],
        [-0.1019, -0.0945, -0.1582,  ...,  0.0242,  0.1684, -0.0818],
        ...,
        [-0.1021, -0.0975,  0.1593,  ...,  0.1648, -0.1363, -0.1357],
        [ 0.0633, -0.0583,  0.1088,  ..., -0.0659, -0.0664,  0.0360],
        [-0.1392,  0.1581, -0.1497,  ..., -0.0487,  0.0845,  0.1195]],
       device='cuda:0', requires_grad=True)
outnn.net.0.bias torch.Size([64]) Parameter containing:
tensor([-0.0043,  0.0681, -0.0942,  0.0394, -0.0194,  0.0589, -0.0639, -0.0650,
        -0.0770, -0.0546,  0.0580,  0.0037,  0.0870,  0.0233, -0.0053,  0.0460,
         0.0387, -0.0509, -0.0533, -0.0243,  0.0417,  0.0958, -0.0916, -0.0491,
         0.0148, -0.0408, -0.0950,  0.0810, -0.0332, -0.0681,  0.0857,  0.0677,
        -0.0635,  0.0857, -0.0152,  0.0506,  0.0404, -0.0435, -0.0206,  0.0597,
         0.0494, -0.0373,  0.0424, -0.0809, -0.0587,  0.0765,  0.0838, -0.0925,
        -0.0209,  0.0348, -0.0178,  0.0235, -0.0294,  0.0205,  0.0650, -0.0662,
         0.0881, -0.0680,  0.0567,  0.0300,  0.0449, -0.0088, -0.0764, -0.0692],
       device='cuda:0', requires_grad=True)
outnn.net.1.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
outnn.net.1.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
outnn.net.1.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
outnn.net.1.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
outnn.net.1.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
outnn.net.1.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
outnn.net.2.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
outnn.net.2.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
outnn.net.2.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
outnn.net.2.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
outnn.net.2.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
outnn.net.2.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
outnn.net.3.resblock.0.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
outnn.net.3.resblock.0.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093,
         0.0093]], device='cuda:0', requires_grad=True)
outnn.net.3.resblock.1.weight torch.Size([64]) Parameter containing:
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0',
       requires_grad=True)
outnn.net.3.resblock.1.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
outnn.net.3.resblock.2.weight torch.Size([64, 64]) Parameter containing:
tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0', requires_grad=True)
outnn.net.3.resblock.2.bias torch.Size([64]) Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0', requires_grad=True)
outnn.net.4.alpha torch.Size([1, 64]) Parameter containing:
tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
         1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], device='cuda:0',
       requires_grad=True)
outnn.net.4.beta torch.Size([1, 64]) Parameter containing:
tensor([[0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156, 0.0156,
         0.0156]], device='cuda:0', requires_grad=True)
outnn.net.5.weight torch.Size([1, 64]) Parameter containing:
tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
       device='cuda:0', requires_grad=True)
outnn.net.5.bias torch.Size([1]) Parameter containing:
tensor([1.], device='cuda:0', requires_grad=True)
